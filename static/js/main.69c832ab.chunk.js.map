{"version":3,"sources":["components/todo/tasksSlice.ts","components/header/Header.tsx","components/todo/TodoListItem.tsx","components/todo/TodoList.tsx","App.tsx","app/store.ts","reportWebVitals.ts","index.tsx"],"names":["taskSlice","createSlice","name","initialState","tasks","reducers","add","state","action","push","payload","remove","filter","id","done","map","e","actions","selectTasks","todo","Header","title","addTask","event","props","uuid","timestamp","moment","setState","preventDefault","onChange","target","value","className","onSubmit","this","type","placeholder","Component","connect","TodoListItem","removeTask","item","console","log","doneTask","Item","classNames","size","onClick","style","fill","fromNow","mapDispatchToProps","TodoList","split","itemLayout","dataSource","renderItem","App","Content","store","configureStore","reducer","todoReducer","middleware","getDefaultMiddleware","serializableCheck","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69c832ab.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\n// import { fetchCount } from './counterAPI';\nimport TodoItem from './types';\n\nexport interface TodoState {\n  tasks: Array<TodoItem>;\n}\n\nconst initialState: TodoState = {\n  tasks: [],\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\n// export const incrementAsync = createAsyncThunk(\n//   'counter/fetchCount',\n//   async (amount: number) => {\n//     const response = await fetchCount(amount);\n//     // The value we return becomes the `fulfilled` action payload\n//     return response.data;\n//   }\n// );\n\nexport const taskSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    add: (state, action: PayloadAction<TodoItem>) => {\n      state.tasks.push(action.payload);\n    },\n    remove: (state, action: PayloadAction<String>) => {\n      state.tasks = state.tasks.filter(({ id }) => id !== action.payload);\n    },\n    done: (state, action: PayloadAction<String>) => {\n      state.tasks = state.tasks.map((e) =>\n        e.id === action.payload ? { ...e, done: true } : e\n      );\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  // extraReducers: (builder) => {\n  //   builder\n  //     .addCase(incrementAsync.pending, (state) => {\n  //       state.status = 'loading';\n  //     })\n  //     .addCase(incrementAsync.fulfilled, (state, action) => {\n  //       state.status = 'idle';\n  //       state.value += action.payload;\n  //     });\n  // },\n});\n\nexport const { add, remove, done } = taskSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectTasks = (state: RootState) => state.todo.tasks;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n// export const incrementIfOdd =\n//   (amount: number): AppThunk =>\n//   (dispatch, getState) => {\n//     const currentValue = selectCount(getState());\n//     if (currentValue % 2 === 1) {\n//       dispatch(incrementByAmount(amount));\n//     }\n//   };\n\nexport default taskSlice.reducer;\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { add } from '../todo/tasksSlice';\nimport TodoItem from '../todo/types'\n\nimport { v4 as uuid } from 'uuid'\nimport moment from 'moment'\n\ninterface Props {\n  addTask: (task: TodoItem) => void\n}\n\ninterface State {\n  title: string\n}\n\nclass Header extends Component<Props, State> {\n\n  state = {\n    title: ''\n  }\n\n  addTask = (event: React.FormEvent<HTMLFormElement>) => {\n    this.props.addTask({\n      id: uuid(),\n      timestamp: moment(),\n      title: this.state.title,\n      done: false\n    })\n    this.setState({ title: '' })\n    event.preventDefault()\n  }\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ title: event.target.value })\n    event.preventDefault()\n  }\n\n  render () {\n    return <div className=\"px-8 flex flex-col\">\n      <div className=\"text-gray-700 text-4xl font-bold py-8\"> Todo</div>\n      <form onSubmit={this.addTask} className=\"flex space-x-2\">\n        <input\n          type=\"text\"\n          className=\"block appearance-none text-base placeholder-gray-500 placeholder-opacity-50 border border-gray-300 rounded-md w-full py-3 px-4 text-gray-700 leading-5 focus:outline-none focus:ring-2 hover:border-emerald-400 focus:border-emerald-400 focus:ring-emerald-300\"\n          placeholder=\"New Task\"\n          value={this.state.title}\n          onChange={this.onChange} />\n        <button type=\"submit\" className=\"min-w-max px-3 py-2 shadow-md bg-green-500 rounded-md text-white focus:outline-none font-semibold hover:transition-colors hover:bg-gradient-to-tr transform transition hover:scale-110 ease-out duration-300 hover:shadow-md\">Add Task</button>\n      </form>\n    </div>\n  }\n}\n\nexport default connect(null, { addTask: add })(Header)","\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport classNames from \"classnames\";\n\nimport moment from 'moment'\nimport { List } from 'antd'\nimport { HiCheckCircle } from 'react-icons/hi'\nimport { FiCircle, FiTrash2 } from 'react-icons/fi'\n\nimport TodoItem from './types'\n\nimport { remove, done } from './tasksSlice';\n\ninterface Props {\n  item: TodoItem\n  removeTask: (id: String) => void,\n  doneTask: (id: String) => void\n}\n\nclass TodoListItem extends Component<Props>{\n\n  removeTask = (event: React.MouseEvent<SVGAElement>) => {\n    this.props.removeTask(this.props.item.id)\n    console.log('Task Removed.');\n    event.preventDefault()\n  }\n\n  done = (event: React.MouseEvent<SVGAElement>) => {\n    this.props.doneTask(this.props.item.id)\n    console.log('Task done.');\n    event.preventDefault()\n  }\n\n  render () {\n    const item = this.props.item\n    return <List.Item className=\"transition-colors group duration-200 border border-gray-300 select-none hover:bg-gray-100 rounded-lg mb-2\">\n      <div className={classNames('h-full', 'py-1', 'text-lg', 'flex', 'flex-row', { 'cursor-pointer': !item.done })}>\n        <div className=\"flex items-center\">\n          {item.done ? <HiCheckCircle size=\"24px\" className=\"text-green-500 ml-1 mr-5\" /> : <FiCircle size=\"24px\" className=\"text-gray-400 ml-1 mr-5 group-hover:text-emerald-500\" onClick={this.done} style={{ fill: 'white' }} />}\n        </div>\n        <div>\n          <span>{item.title}</span>\n          <div className=\"text-sm text-gray-400\">{moment(item.timestamp).fromNow()}</div>\n        </div>\n      </div>\n      <FiTrash2 onClick={this.removeTask} className=\"text-gray-500 hover:text-red-700 md:mr-4 cursor-pointer\" size=\"24px\" />\n    </List.Item>\n  }\n\n}\n\nconst mapDispatchToProps = {\n  removeTask: remove,\n  doneTask: done\n}\n\nexport default connect(null, mapDispatchToProps)(TodoListItem)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { List } from 'antd'\nimport TodoListItem from './TodoListItem'\nimport TodoItem from './types'\n\nimport { selectTasks } from './tasksSlice';\n\ninterface Props {\n  tasks: Array<TodoItem>\n}\n\nclass TodoList extends Component<Props> {\n\n  render () {\n    return <div className=\"px-8 my-6 h-full overflow-auto\">\n      <List\n        split={false}\n        itemLayout=\"horizontal\"\n        size=\"small\"\n        dataSource={this.props.tasks}\n        renderItem={item => <TodoListItem item={item} />}\n      />\n    </div>\n  }\n}\nconst mapStateToProps = (state: any) => ({\n  tasks: selectTasks(state)\n});\n\nexport default connect(mapStateToProps)(TodoList)\n","import React from 'react';\nimport { Layout } from 'antd'\nimport Header from './components/header/Header'\nimport TodoList from './components/todo/TodoList'\n\nimport './App.sass';\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Layout className=\"layout h-screen\">\n        <Layout.Content className=\"p-4 lg:p-20 bg-gray-100\">\n          <div className=\"w-full h-full flex justify-center items-center\">\n            <div className=\"w-full lg:w-2/3 bg-white flex flex-col rounded-2xl shadow-lg h-full\">\n              <Header />\n              <TodoList />\n            </div>\n          </div>\n        </Layout.Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import {\n  configureStore,\n  ThunkAction,\n  Action,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport todoReducer from '../components/todo/tasksSlice';\n\nexport const store = configureStore({\n  reducer: {\n    todo: todoReducer,\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: false,\n  }),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.sass';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport { store } from './app/store';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}