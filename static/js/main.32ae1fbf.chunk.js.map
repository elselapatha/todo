{"version":3,"sources":["components/todo/tasksSlice.ts","components/header/Header.tsx","components/todo/TodoListItem.tsx","components/todo/TodoList.tsx","App.tsx","app/store.ts","reportWebVitals.ts","index.tsx"],"names":["loadTodoAsync","createAsyncThunk","a","axios","get","baseURL","process","response","data","postTodoAsync","todo","dispatch","add","post","doneTodoAsync","id","done","patch","removeTodoAsync","remove","delete","taskSlice","createSlice","name","initialState","tasks","loading","reducers","state","action","splice","payload","filter","map","e","extraReducers","builder","addCase","pending","fulfilled","actions","selectTasks","selectLoading","Header","title","addTask","event","props","uuid","timestamp","moment","setState","console","log","preventDefault","onChange","target","value","className","onSubmit","this","type","placeholder","Component","connect","TodoListItem","removeTask","item","doneTask","Item","classNames","size","onClick","style","fill","fromNow","mapDispatchToProps","TodoList","tip","spinning","split","itemLayout","dataSource","renderItem","App","Content","store","configureStore","reducer","todoReducer","middleware","getDefaultMiddleware","serializableCheck","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32ae1fbf.chunk.js","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport TodoItem from './types';\n\nexport interface TodoState {\n  tasks: Array<TodoItem>;\n  loading: boolean;\n}\n\nconst initialState: TodoState = {\n  tasks: [],\n  loading: false,\n};\n\nexport const loadTodoAsync = createAsyncThunk('todo/fetchTasks', async () => {\n  const response = await axios.get('/todo', {\n    baseURL: process.env.REACT_APP_BASE_URL,\n  });\n  return response.data;\n});\n\nexport const postTodoAsync = createAsyncThunk(\n  'todo/postTasks',\n  async (todo: TodoItem, { dispatch }) => {\n    dispatch(add(todo));\n    await axios.post('/todo', todo, {\n      baseURL: process.env.REACT_APP_BASE_URL,\n    });\n    return todo;\n  }\n);\n\nexport const doneTodoAsync = createAsyncThunk(\n  'todo/doneTasks',\n  async (id: String, { dispatch }) => {\n    dispatch(done(id));\n    await axios.patch(`/todo/${id}`, null, {\n      baseURL: process.env.REACT_APP_BASE_URL,\n    });\n    return id;\n  }\n);\n\nexport const removeTodoAsync = createAsyncThunk(\n  'todo/removeTasks',\n  async (id: String, { dispatch }) => {\n    dispatch(remove(id));\n    await axios.delete(`/todo/${id}`, {\n      baseURL: process.env.REACT_APP_BASE_URL,\n    });\n    return id;\n  }\n);\n\nexport const taskSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    add: (state, action: PayloadAction<TodoItem>) => {\n      state.tasks.splice(0, 0, action.payload);\n    },\n    remove: (state, action: PayloadAction<String>) => {\n      state.tasks = state.tasks.filter(({ id }) => id !== action.payload);\n    },\n    done: (state, action: PayloadAction<String>) => {\n      state.tasks = state.tasks.map((e) =>\n        e.id === action.payload ? { ...e, done: true } : e\n      );\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadTodoAsync.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(loadTodoAsync.fulfilled, (state, action) => {\n        state.tasks = [...action.payload];\n        state.loading = false;\n      });\n  },\n});\n\nexport const { add, remove, done } = taskSlice.actions;\n\nexport const selectTasks = (state: RootState) => state.todo.tasks;\nexport const selectLoading = (state: RootState) => state.todo.loading;\n\nexport default taskSlice.reducer;\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { postTodoAsync } from '../todo/tasksSlice';\nimport TodoItem from '../todo/types'\n\nimport { v4 as uuid } from 'uuid'\nimport moment from 'moment'\n\ninterface Props {\n  addTask: (task: TodoItem) => void\n}\n\ninterface State {\n  title: string\n}\n\nclass Header extends Component<Props, State> {\n\n  state = {\n    title: ''\n  }\n\n  addTask = (event: React.FormEvent<HTMLFormElement>) => {\n    this.props.addTask({\n      id: uuid(),\n      timestamp: moment(),\n      title: this.state.title,\n      done: false\n    })\n    this.setState({ title: '' })\n    console.log('Added Successfully');\n    event.preventDefault()\n  }\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ title: event.target.value })\n    event.preventDefault()\n  }\n\n  render () {\n    return <div className=\"px-8 flex flex-col\">\n      <div className=\"text-gray-700 text-4xl font-bold py-8\"> Todo</div>\n      <form onSubmit={this.addTask} className=\"flex space-x-2\">\n        <input\n          type=\"text\"\n          className=\"block appearance-none text-base placeholder-gray-500 placeholder-opacity-50 border border-gray-300 rounded-md w-full py-3 px-4 text-gray-700 leading-5 focus:outline-none focus:ring-2 hover:border-emerald-400 focus:border-emerald-400 focus:ring-emerald-300\"\n          placeholder=\"New Task\"\n          value={this.state.title}\n          onChange={this.onChange} />\n        <button type=\"submit\" className=\"min-w-max px-3 py-2 shadow-md bg-green-500 rounded-md text-white focus:outline-none font-semibold hover:transition-colors hover:bg-gradient-to-tr transform transition hover:scale-110 ease-out duration-300 hover:shadow-md\">Add Task</button>\n      </form>\n    </div>\n  }\n}\n\nexport default connect(null, { addTask: postTodoAsync })(Header)","\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport classNames from \"classnames\";\n\nimport moment from 'moment'\nimport { List } from 'antd'\nimport { HiCheckCircle } from 'react-icons/hi'\nimport { FiCircle, FiTrash2 } from 'react-icons/fi'\n\nimport TodoItem from './types'\n\nimport { removeTodoAsync, doneTodoAsync } from './tasksSlice';\n\ninterface Props {\n  item: TodoItem\n  removeTask: (id: String) => void,\n  doneTask: (id: String) => void\n}\n\nclass TodoListItem extends Component<Props>{\n\n  removeTask = (event: React.MouseEvent<SVGAElement>) => {\n    this.props.removeTask(this.props.item.id)\n    console.log('Task Removed.');\n    event.preventDefault()\n  }\n\n  done = (event: React.MouseEvent<SVGAElement>) => {\n    this.props.doneTask(this.props.item.id)\n    console.log('Task done.');\n    event.preventDefault()\n  }\n\n  render () {\n    const item = this.props.item\n    return <List.Item className=\"transition-colors group duration-200 border border-gray-300 select-none hover:bg-gray-100 rounded-lg mb-2\">\n      <div className={classNames('h-full', 'py-1', 'text-lg', 'flex', 'flex-row', { 'cursor-pointer': !item.done })}>\n        <div className=\"flex items-center\">\n          {item.done ? <HiCheckCircle size=\"24px\" className=\"text-green-500 ml-1 mr-5\" /> : <FiCircle size=\"24px\" className=\"text-gray-400 ml-1 mr-5 group-hover:text-emerald-500\" onClick={this.done} style={{ fill: 'white' }} />}\n        </div>\n        <div>\n          <span className={classNames({ 'line-through': item.done })}>{item.title}</span>\n          <div className=\"text-sm text-gray-400\">{moment(item.timestamp).fromNow()}</div>\n        </div>\n      </div>\n      <FiTrash2 onClick={this.removeTask} className=\"text-gray-500 hover:text-red-700 md:mr-4 cursor-pointer\" size=\"24px\" />\n    </List.Item>\n  }\n\n}\n\nconst mapDispatchToProps = {\n  removeTask: removeTodoAsync,\n  doneTask: doneTodoAsync\n}\n\nexport default connect(null, mapDispatchToProps)(TodoListItem)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { List, Spin } from 'antd'\nimport TodoListItem from './TodoListItem'\nimport TodoItem from './types'\n\nimport { selectTasks, selectLoading } from './tasksSlice';\nimport { RootState } from '../../app/store'\n\ninterface Props {\n  tasks: Array<TodoItem>,\n  loading: boolean\n}\n\nclass TodoList extends Component<Props> {\n\n  render () {\n    return <div className=\"px-8 my-6 h-full overflow-auto\">\n      <Spin tip=\"Loading...\" spinning={false}>\n        <List\n          split={false}\n          itemLayout=\"horizontal\"\n          size=\"small\"\n          dataSource={this.props.tasks}\n          renderItem={item => <TodoListItem item={item} />}\n        />\n      </Spin>\n    </div>\n  }\n}\nconst mapStateToProps = (state: RootState) => ({\n  tasks: selectTasks(state),\n  loading: selectLoading(state)\n});\n\nexport default connect(mapStateToProps)(TodoList)\n","import React from 'react';\nimport { Layout } from 'antd'\nimport Header from './components/header/Header'\nimport TodoList from './components/todo/TodoList'\n\nimport './App.sass';\nfunction App () {\n  return (\n    <div className=\"App\">\n      <Layout className=\"layout h-screen\">\n        <Layout.Content className=\"p-4 lg:p-20 bg-gray-100\">\n          <div className=\"w-full h-full flex justify-center items-center\">\n            <div className=\"w-full lg:w-2/3 bg-white flex flex-col rounded-2xl shadow-lg h-full\">\n              <Header />\n              <TodoList />\n            </div>\n          </div>\n        </Layout.Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","import {\n  configureStore,\n  ThunkAction,\n  Action,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport todoReducer from '../components/todo/tasksSlice';\n\nexport const store = configureStore({\n  reducer: {\n    todo: todoReducer,\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: false,\n  }),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.sass';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { loadTodoAsync } from './components/todo/tasksSlice'\nimport reportWebVitals from './reportWebVitals';\n\nstore.dispatch(loadTodoAsync())\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}